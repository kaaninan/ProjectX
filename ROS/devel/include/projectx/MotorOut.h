// Generated by gencpp from file projectx/MotorOut.msg
// DO NOT EDIT!


#ifndef PROJECTX_MESSAGE_MOTOROUT_H
#define PROJECTX_MESSAGE_MOTOROUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace projectx
{
template <class ContainerAllocator>
struct MotorOut_
{
  typedef MotorOut_<ContainerAllocator> Type;

  MotorOut_()
    : id(0)
    , pos(0)
    , speed(0)
    , torque(0)
    , rw(0)
    , action(0)  {
    }
  MotorOut_(const ContainerAllocator& _alloc)
    : id(0)
    , pos(0)
    , speed(0)
    , torque(0)
    , rw(0)
    , action(0)  {
    }



   typedef int64_t _id_type;
  _id_type id;

   typedef int64_t _pos_type;
  _pos_type pos;

   typedef int64_t _speed_type;
  _speed_type speed;

   typedef int64_t _torque_type;
  _torque_type torque;

   typedef int64_t _rw_type;
  _rw_type rw;

   typedef int64_t _action_type;
  _action_type action;




  typedef boost::shared_ptr< ::projectx::MotorOut_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::projectx::MotorOut_<ContainerAllocator> const> ConstPtr;

}; // struct MotorOut_

typedef ::projectx::MotorOut_<std::allocator<void> > MotorOut;

typedef boost::shared_ptr< ::projectx::MotorOut > MotorOutPtr;
typedef boost::shared_ptr< ::projectx::MotorOut const> MotorOutConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::projectx::MotorOut_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::projectx::MotorOut_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace projectx

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'projectx': ['/home/ubuntu/ProjectX/ROS/src/projectx/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::projectx::MotorOut_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::projectx::MotorOut_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::projectx::MotorOut_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::projectx::MotorOut_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::projectx::MotorOut_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::projectx::MotorOut_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::projectx::MotorOut_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c569e6a2d73436766c3b4d4f657523e";
  }

  static const char* value(const ::projectx::MotorOut_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c569e6a2d734367ULL;
  static const uint64_t static_value2 = 0x66c3b4d4f657523eULL;
};

template<class ContainerAllocator>
struct DataType< ::projectx::MotorOut_<ContainerAllocator> >
{
  static const char* value()
  {
    return "projectx/MotorOut";
  }

  static const char* value(const ::projectx::MotorOut_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::projectx::MotorOut_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 id\n\
int64 pos\n\
int64 speed\n\
int64 torque\n\
int64 rw\n\
int64 action\n\
";
  }

  static const char* value(const ::projectx::MotorOut_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::projectx::MotorOut_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.pos);
      stream.next(m.speed);
      stream.next(m.torque);
      stream.next(m.rw);
      stream.next(m.action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct MotorOut_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::projectx::MotorOut_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::projectx::MotorOut_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "pos: ";
    Printer<int64_t>::stream(s, indent + "  ", v.pos);
    s << indent << "speed: ";
    Printer<int64_t>::stream(s, indent + "  ", v.speed);
    s << indent << "torque: ";
    Printer<int64_t>::stream(s, indent + "  ", v.torque);
    s << indent << "rw: ";
    Printer<int64_t>::stream(s, indent + "  ", v.rw);
    s << indent << "action: ";
    Printer<int64_t>::stream(s, indent + "  ", v.action);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECTX_MESSAGE_MOTOROUT_H
