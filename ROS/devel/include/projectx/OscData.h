// Generated by gencpp from file projectx/OscData.msg
// DO NOT EDIT!


#ifndef PROJECTX_MESSAGE_OSCDATA_H
#define PROJECTX_MESSAGE_OSCDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace projectx
{
template <class ContainerAllocator>
struct OscData_
{
  typedef OscData_<ContainerAllocator> Type;

  OscData_()
    : name()
    , value()  {
    }
  OscData_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , value(_alloc)  {
    }



   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _name_type;
  _name_type name;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _value_type;
  _value_type value;




  typedef boost::shared_ptr< ::projectx::OscData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::projectx::OscData_<ContainerAllocator> const> ConstPtr;

}; // struct OscData_

typedef ::projectx::OscData_<std::allocator<void> > OscData;

typedef boost::shared_ptr< ::projectx::OscData > OscDataPtr;
typedef boost::shared_ptr< ::projectx::OscData const> OscDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::projectx::OscData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::projectx::OscData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace projectx

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'projectx': ['/home/ubuntu/ProjectX/ROS/src/projectx/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::projectx::OscData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::projectx::OscData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::projectx::OscData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::projectx::OscData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::projectx::OscData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::projectx::OscData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::projectx::OscData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e8562cd47ba1887eb1c2b71a82b7377";
  }

  static const char* value(const ::projectx::OscData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e8562cd47ba1887ULL;
  static const uint64_t static_value2 = 0xeb1c2b71a82b7377ULL;
};

template<class ContainerAllocator>
struct DataType< ::projectx::OscData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "projectx/OscData";
  }

  static const char* value(const ::projectx::OscData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::projectx::OscData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64[] name\n\
int64[] value\n\
";
  }

  static const char* value(const ::projectx::OscData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::projectx::OscData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct OscData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::projectx::OscData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::projectx::OscData_<ContainerAllocator>& v)
  {
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "value[]" << std::endl;
    for (size_t i = 0; i < v.value.size(); ++i)
    {
      s << indent << "  value[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.value[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECTX_MESSAGE_OSCDATA_H
