// Generated by gencpp from file projectx/Sensor.msg
// DO NOT EDIT!


#ifndef PROJECTX_MESSAGE_SENSOR_H
#define PROJECTX_MESSAGE_SENSOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace projectx
{
template <class ContainerAllocator>
struct Sensor_
{
  typedef Sensor_<ContainerAllocator> Type;

  Sensor_()
    : dis(0)
    , ldr(0)
    , temp(0.0)
    , temp_out(0.0)
    , humidity(0.0)  {
    }
  Sensor_(const ContainerAllocator& _alloc)
    : dis(0)
    , ldr(0)
    , temp(0.0)
    , temp_out(0.0)
    , humidity(0.0)  {
    }



   typedef int64_t _dis_type;
  _dis_type dis;

   typedef int64_t _ldr_type;
  _ldr_type ldr;

   typedef double _temp_type;
  _temp_type temp;

   typedef double _temp_out_type;
  _temp_out_type temp_out;

   typedef double _humidity_type;
  _humidity_type humidity;




  typedef boost::shared_ptr< ::projectx::Sensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::projectx::Sensor_<ContainerAllocator> const> ConstPtr;

}; // struct Sensor_

typedef ::projectx::Sensor_<std::allocator<void> > Sensor;

typedef boost::shared_ptr< ::projectx::Sensor > SensorPtr;
typedef boost::shared_ptr< ::projectx::Sensor const> SensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::projectx::Sensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::projectx::Sensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace projectx

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'projectx': ['/home/ubuntu/ProjectX/ROS/src/projectx/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::projectx::Sensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::projectx::Sensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::projectx::Sensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::projectx::Sensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::projectx::Sensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::projectx::Sensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::projectx::Sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dba7b0b4b263b01b4f2166b3e5a0e9c5";
  }

  static const char* value(const ::projectx::Sensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdba7b0b4b263b01bULL;
  static const uint64_t static_value2 = 0x4f2166b3e5a0e9c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::projectx::Sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "projectx/Sensor";
  }

  static const char* value(const ::projectx::Sensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::projectx::Sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 dis\n\
int64 ldr\n\
float64 temp\n\
float64 temp_out\n\
float64 humidity\n\
";
  }

  static const char* value(const ::projectx::Sensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::projectx::Sensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dis);
      stream.next(m.ldr);
      stream.next(m.temp);
      stream.next(m.temp_out);
      stream.next(m.humidity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Sensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::projectx::Sensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::projectx::Sensor_<ContainerAllocator>& v)
  {
    s << indent << "dis: ";
    Printer<int64_t>::stream(s, indent + "  ", v.dis);
    s << indent << "ldr: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ldr);
    s << indent << "temp: ";
    Printer<double>::stream(s, indent + "  ", v.temp);
    s << indent << "temp_out: ";
    Printer<double>::stream(s, indent + "  ", v.temp_out);
    s << indent << "humidity: ";
    Printer<double>::stream(s, indent + "  ", v.humidity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECTX_MESSAGE_SENSOR_H
