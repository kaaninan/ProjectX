# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from projectx/Sensor.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Sensor(genpy.Message):
  _md5sum = "dba7b0b4b263b01b4f2166b3e5a0e9c5"
  _type = "projectx/Sensor"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 dis
int64 ldr
float64 temp
float64 temp_out
float64 humidity
"""
  __slots__ = ['dis','ldr','temp','temp_out','humidity']
  _slot_types = ['int64','int64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       dis,ldr,temp,temp_out,humidity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Sensor, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.dis is None:
        self.dis = 0
      if self.ldr is None:
        self.ldr = 0
      if self.temp is None:
        self.temp = 0.
      if self.temp_out is None:
        self.temp_out = 0.
      if self.humidity is None:
        self.humidity = 0.
    else:
      self.dis = 0
      self.ldr = 0
      self.temp = 0.
      self.temp_out = 0.
      self.humidity = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2q3d.pack(_x.dis, _x.ldr, _x.temp, _x.temp_out, _x.humidity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.dis, _x.ldr, _x.temp, _x.temp_out, _x.humidity,) = _struct_2q3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2q3d.pack(_x.dis, _x.ldr, _x.temp, _x.temp_out, _x.humidity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.dis, _x.ldr, _x.temp, _x.temp_out, _x.humidity,) = _struct_2q3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2q3d = struct.Struct("<2q3d")
