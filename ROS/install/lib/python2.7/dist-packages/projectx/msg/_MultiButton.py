# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from projectx/MultiButton.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import projectx.msg
import std_msgs.msg

class MultiButton(genpy.Message):
  _md5sum = "880b03eb2c058ce5a9ec27c84df03870"
  _type = "projectx/MultiButton"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# TouchOSC Multibutton Control

Header header
CommonProperties common
uint16[2] dimension
float32[2] range
float32[] values
bool z

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: projectx/CommonProperties
# Common functionality to all TouchOSC controls

string tabpage          # Control tabpage
string name             # Control Name
int16 x                 # X position of the control
int16 y                 # Y position of the control
uint16 width            # Width of the control
uint16 height           # Height of the control
string visible          # Visibility of the control

# Possible colors are:
# "red", "green", "blue", "yellow", "orange", "purple", "gray"
string color            # Color of the control

"""
  __slots__ = ['header','common','dimension','range','values','z']
  _slot_types = ['std_msgs/Header','projectx/CommonProperties','uint16[2]','float32[2]','float32[]','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,common,dimension,range,values,z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MultiButton, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.common is None:
        self.common = projectx.msg.CommonProperties()
      if self.dimension is None:
        self.dimension = [0,0]
      if self.range is None:
        self.range = [0.,0.]
      if self.values is None:
        self.values = []
      if self.z is None:
        self.z = False
    else:
      self.header = std_msgs.msg.Header()
      self.common = projectx.msg.CommonProperties()
      self.dimension = [0,0]
      self.range = [0.,0.]
      self.values = []
      self.z = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.common.tabpage
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.common.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2h2H.pack(_x.common.x, _x.common.y, _x.common.width, _x.common.height))
      _x = self.common.visible
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.common.color
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_2H.pack(*self.dimension))
      buff.write(_struct_2f.pack(*self.range))
      length = len(self.values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.values))
      buff.write(_struct_B.pack(self.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.common is None:
        self.common = projectx.msg.CommonProperties()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.common.tabpage = str[start:end].decode('utf-8')
      else:
        self.common.tabpage = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.common.name = str[start:end].decode('utf-8')
      else:
        self.common.name = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.common.x, _x.common.y, _x.common.width, _x.common.height,) = _struct_2h2H.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.common.visible = str[start:end].decode('utf-8')
      else:
        self.common.visible = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.common.color = str[start:end].decode('utf-8')
      else:
        self.common.color = str[start:end]
      start = end
      end += 4
      self.dimension = _struct_2H.unpack(str[start:end])
      start = end
      end += 8
      self.range = _struct_2f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.values = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.z,) = _struct_B.unpack(str[start:end])
      self.z = bool(self.z)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.common.tabpage
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.common.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2h2H.pack(_x.common.x, _x.common.y, _x.common.width, _x.common.height))
      _x = self.common.visible
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.common.color
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(self.dimension.tostring())
      buff.write(self.range.tostring())
      length = len(self.values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.values.tostring())
      buff.write(_struct_B.pack(self.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.common is None:
        self.common = projectx.msg.CommonProperties()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.common.tabpage = str[start:end].decode('utf-8')
      else:
        self.common.tabpage = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.common.name = str[start:end].decode('utf-8')
      else:
        self.common.name = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.common.x, _x.common.y, _x.common.width, _x.common.height,) = _struct_2h2H.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.common.visible = str[start:end].decode('utf-8')
      else:
        self.common.visible = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.common.color = str[start:end].decode('utf-8')
      else:
        self.common.color = str[start:end]
      start = end
      end += 4
      self.dimension = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=2)
      start = end
      end += 8
      self.range = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.values = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 1
      (self.z,) = _struct_B.unpack(str[start:end])
      self.z = bool(self.z)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2H = struct.Struct("<2H")
_struct_3I = struct.Struct("<3I")
_struct_B = struct.Struct("<B")
_struct_2h2H = struct.Struct("<2h2H")
_struct_2f = struct.Struct("<2f")
